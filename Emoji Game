/* Write your code here. */
.arrange {
  width: 35%;
  margin-top: 8px;
  margin-bottom: 8px;
  list-style-type: none;
}

@media screen and (min-width: 992px) {
  .arrange {
    width: 20%;
  }
}
.button {
  background-color: #ffffff33;
  border: 3px solid #ffffff33;
  border-radius: 20px;
  cursor: pointer;
  margin: 20px;
  margin-right: 30px;
  outline: none;
  width: 100%;
  height: 100px;
}

@media screen and (min-width: 768px) {
  .button {
    height: 200px;
  }
}

.emoji-icon {
  width: 50px;
}

@media screen and (min-width: 768px) {
  .emoji-icon {
    width: 100px;
  }
}






// Write your code here.
import './index.css'

const EmojiCard = props => {
  const {emojiDetails, clickEmoji} = props
  const {id, emojiName, emojiUrl} = emojiDetails

  const onClickEmoji = () => {
    clickEmoji(id)
  }

  return (
    <li className="arrange">
      <button type="button" className="button" onClick={onClickEmoji}>
        <img src={emojiUrl} className="emoji-icon" alt={emojiName} />
      </button>
    </li>
  )
}

export default EmojiCard






/* Write your code here. */
.bg-container {
  background-image: linear-gradient(to bottom, #9796f0, #fbc7d4);
  min-height: 100vh;
  background-size: cover;
  display: flex;
  flex-direction: column;
}

.emoji-game-body {
  display: flex;
  flex-direction: column;
  align-items: center;
  flex: 1;
}

.emojis-list-container {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  width: 80%;
  margin: auto;
  padding: 0px;
}






/* 
Quick Tip 

- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.

const shuffledEmojisList = () => {
  const {emojisList} = this.props
  return emojisList.sort(() => Math.random() - 0.5)
}

*/

// Write your code here.
import {Component} from 'react'

import EmojiCard from '../EmojiCard'
import NavBar from '../NavBar'
import WinOrLossCard from '../WinOrLoseCard'

import './index.css'

class EmojiGame extends Component {
  state = {
    clickedEmojisList: [],
    isGameInProgress: true,
    topScore: 0,
  }

  resetGame = () => {
    this.setState({clickedEmojisList: [], isGameInProgress: true})
  }

  renderScoreCard = () => {
    const {emojisList} = this.props
    const {clickedEmojisList} = this.state
    const isWon = clickedEmojisList.length === emojisList.length

    return (
      <WinOrLossCard
        isWon={isWon}
        onClickPlayAgain={this.resetGame}
        score={clickedEmojisList.length}
      />
    )
  }

  finishedGameAndSetTopScore = currentScore => {
    const {topScore} = this.state
    let newTopScore = topScore

    if (currentScore > topScore) {
      newTopScore = currentScore
    }

    this.setState({topScore: newTopScore, isGameInProgress: false})
  }

  clickEmoji = id => {
    const {emojisList} = this.props
    const {clickedEmojisList} = this.state
    const isEmojiPresent = clickedEmojisList.includes(id)
    const clickedEmojisLength = clickedEmojisList.length

    if (isEmojiPresent) {
      this.finishedGameAndSetTopScore(clickedEmojisLength)
    } else {
      if (emojisList.length - 1 === clickedEmojisLength) {
        this.finishedGameAndSetTopScore(emojisList.length)
      }
      this.setState(prevState => ({
        clickedEmojisList: [...prevState.clickedEmojisList, id],
      }))
    }
  }

  getShuffledEmojisList = () => {
    const {emojisList} = this.props
    return emojisList.sort(() => Math.random() - 0.5)
  }

  renderEmojisList = () => {
    const shuffleEmojisList = this.getShuffledEmojisList()

    return (
      <ul className="emojis-list-container">
        {shuffleEmojisList.map(emojiObject => (
          <EmojiCard
            key={emojiObject.id}
            emojiDetails={emojiObject}
            clickEmoji={this.clickEmoji}
          />
        ))}
      </ul>
    )
  }

  render() {
    const {clickedEmojisList, isGameInProgress, topScore} = this.state

    return (
      <div className="bg-container">
        <NavBar
          currentScore={clickedEmojisList.length}
          isGameInProgress={isGameInProgress}
          topScore={topScore}
        />
        <div>
          {isGameInProgress ? this.renderEmojisList() : this.renderScoreCard()}
        </div>
      </div>
    )
  }
}

export default EmojiGame







/* Write your code here. */
.nav-bar-container {
  display: flex;
  justify-content: center;
  background-color: #ffffff33;
  padding: 10px;
}

.title-container {
  display: flex;
  justify-content: space-between;
  flex: 80%;
  max-width: 1000px;
}

.logo-container {
  display: flex;
  align-items: center;
}

.emoji-logo {
  width: 24px;
}

@media screen and (min-width: 768px) {
  .emoji-logo {
    width: 48px;
  }
}
.title {
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 16px;
  font-weight: bold;
}

@media screen and (min-width: 768px) {
  .title {
    font-size: 24px;
  }
}

.score-container {
  display: flex;
}

.score {
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 16px;
  font-weight: 500;
  margin-top: 32px;
}

@media screen and (min-width: 768px) {
  .score {
    font-size: 24px;
    margin-left: 32px;
  }
}








// Write your code here.
import './index.css'

const NavBar = props => {
  const {currentScore, topScore, isGameInProgress} = props

  return (
    <nav className="nav-bar-container">
      <div className="title-container">
        <div className="logo-container">
          <img
            className="emoji-logo"
            src="https://assets.ccbp.in/frontend/react-js/game-logo-img.png"
            alt="emoji logo"
          />
          <h1 className="title">Emoji Game</h1>
        </div>
        {isGameInProgress && (
          <div className="score-container">
            <p className="score">Score: {currentScore}</p>
            <p className="score">Top Score: {topScore}</p>
          </div>
        )}
      </div>
    </nav>
  )
}

export default NavBar






/* Write your code here. */
.win-or-loss-card {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background-color: #ffffff33;
  width: 85%;
  border: 3px solid #ffffff33;
  border-radius: 24px;
  margin: auto;
  padding: 16px;
}

@media screen and (min-width: 768px) {
  .win-or-loss-card {
    width: 80%;
    padding: 32px;
  }
}

@media screen and (min-width: 992px) {
  .win-or-loss-card {
    flex-direction: row;
    width: 70%;
  }
}

@media screen and (min-width: 1200px) {
  .win-or-loss-card {
    width: 60%;
  }
}

.details-section {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  order: 1;
}

@media screen and (min-width: 992px) {
  .details-section {
    order: 0;
  }
}

.heading {
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 28px;
  font-weight: bold;
}

@media screen and (min-width: 992px) {
  .heading {
    font-size: 64px;
  }
}

.current-score {
  text-align: center;
  color: #ffffff;
  font-family: 'Roboto';
  font-size: 18px;
  font-weight: bold;
  margin: 0px;
}

@media screen and (min-width: 992px) {
  .current-score {
    font-size: 36px;
  }
}

.current-score-value {
  text-align: center;
  color: #6a59ff;
  font-family: 'Roboto';
  font-size: 18px;
  font-weight: bold;
  margin: 0px;
}

@media screen and (min-width: 768px) {
  .current-score-value {
    font-size: 48px;
  }
}

.play-button {
  color: #3d3d3d;
  background-color: #ffce27;
  font-family: 'Roboto';
  font-size: 16px;
  font-weight: bold;
  border: none;
  border-radius: 20px;
  margin: 16px;
  padding: 16px;
  padding-right: 24px;
  padding-left: 24px;
  cursor: pointer;
  outline: none;
}

.image-section {
  display: flex;
  justify-content: center;
  order: 0;
}

@media screen and (min-width: 992px) {
  .image-section {
    order: 1;
  }
}

.image {
  width: 150px;
  height: 200px;
}

@media screen and (min-width: 992px) {
  .image {
    width: 350px;
    height: 450px;
  }
}





// Write your code here.
import './index.css'

const WON_IMAGE = 'https://assets.ccbp.in/frontend/react-js/won-game-img.png'
const LOST_IMAGE = 'https://assets.ccbp.in/frontend/react-js/lose-game-img.png'

const WinOrLoseCard = props => {
  const {isWon, onClickPlayAgain, score} = props
  const imageUrl = isWon ? WON_IMAGE : LOST_IMAGE
  const gameStatus = isWon ? 'You Won' : 'You Lose'
  const scoreLabel = isWon ? 'Best Score' : 'Score'

  return (
    <div className="win-or-loss-card">
      <div className="details-section">
        <h1 className="heading">{gameStatus}</h1>
        <p className="current-score">{scoreLabel}</p>
        <p className="current-score-value">{score}/12</p>
        <button
          type="button"
          className="play-button"
          onClick={onClickPlayAgain}
        >
          Play Again
        </button>
      </div>
      <div className="image-section">
        <img className="image" src={imageUrl} alt="win or lose" />
      </div>
    </div>
  )
}

export default WinOrLoseCard
